Yet another MIPS processor simulator.

DESCRIPTION:
This simulator runs a subset of the little endian MIPS32 (MIPSEL)
specification. Full compliance to the specification is a non-goal, in fact it
only implements enough instructions to run the examples on the development
machine (that uses gcc 10.2). It does not implement caches and any type of
memory management. It does not have a delay slot. It does not implements
interruptions of any kind.

To build the simulator:
	- Build dependencies: c99 compiler, POSIX compatible libc, elf.h
	  (installed via libelf on Linux) and err.h (installed via libbsd
	  on Linux)
	- check config.mk and, if needed, set compiler and flags to your liking
	- make

To build the examples:
	- Build dependencies: MIPSEL capable assembler, compiler and linker
		* To be fair, the assembly files were written with GNU as(1) in
		  mind, nonetheless, it should be easy to port to another
		  assembler, given that no fancy features were used. Anecdotal
		  evidence points that GNU as is the most available option, so
		  in the end, this is a non-issue.
	- cd examples
	- check config.mk and, if needed, set compiler and flags to your liking
	- make
		* It is possible to build individual programs by running
		  make PROGRAM_NAME, where PROGRAM_NAME is the program's file
		  name excluding the '.c'

EXAMPLES:
To run the simulator (from the repository's root directory):
	- ./psim /path/to/mipsel_object_file

Alternatively, if a sh(1) compatible shell is available:
	- cd examples
	- ./run_exp PROGRAM_NAME
		* This generates some data for plotting, so, after its
		  execution a *LOT* of .csv files will be on the examples
		  directory. Creating these plots needs gnuplot(1) and there
		  are some .gp scripts already.

If your program uses more than one processor (like most of the examples):
	- ./psim -c NPROC /path/to/program
By default, NPROC is 1.

The '-c' option is for simulating a shared memory multiprocessor system. To
simulate a network of processors use:
	- ./psim -n NxM /path/to/program
By "network", understand it as a NxM 2D mesh, where each node is a processor.
This behaviour is to simulate how the transputer network capabilities were
initially conceived.

If your program needs more memory:
	- ./psim -m MEMSZ_IN_BYTES /path/to/program
By default MEMSZ_IN_BYTES is 16777216 bytes (16 MiB).

TODO:
- Multi-threaded simulation
- Better program loading in the networked mode
- Better libraries for simulated programs

NOTES:
If the INSTRDUMP macro is set when compiling (it is not by default) files
called cpuXXXX_instrdump will be created when the program is executed. To
check these files a MIPSEL capable disassembler is needed (it is possible
to use hexdump but this will make debugging even worse). For example, using
GNU objdump(1):
	- objdump -b binary -m mips -EL -Mno-aliases -D cpuXXXX_instrdump

If the VERBOSE macro is set when compiling (it is not by default) the simulator
will print additional warning messages to stderr, maybe useful for debugging.

At the end of the simulation, a file called perfct_PROGRAM_NAME.csv will be
created at the current directory, containing a number of performance counters.

Although it can simulate multiple processors, the simulator itself runs on
a single thread. This makes easier to debug the examples (the simulation is
deterministic and gives the same result every time) at the cost of simulation
speed.

Program loading on the network mode is quite dumb and wasteful, since it loads
every processor in the the network with the same program.

Always remember to use the correct number of simulated processors while
running the examples, otherwise the simulation can hang forever.
